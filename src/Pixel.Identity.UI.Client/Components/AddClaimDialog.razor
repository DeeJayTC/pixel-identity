<MudDialog>
    <DialogContent>
        <MudGrid Spacing="3" Justify="Justify.FlexStart">
            <MudItem xs="6" Style="width:240px">
                <MudTextField @bind-Value="@model.Type" Label="Type" Class="mt-n3" @onfocus="(() => error = string.Empty)"
                              Variant="Variant.Text" Margin="Margin.None" Immediate="true" ></MudTextField>
            </MudItem>
             <MudItem xs="5" Style="width:180px">
                <MudTextField @bind-Value="@model.Value" Label="Value" Class="mt-n3" @onfocus="(() => error = string.Empty)"
                              Variant="Variant.Text" Margin="Margin.None" Immediate="true" ></MudTextField>
            </MudItem>
            <MudItem xs="1" Class="ml-n3">
                <MudIconButton OnClick="AddNewClaim"  Disabled="string.IsNullOrEmpty(model.Type) || string.IsNullOrEmpty(model.Value)"
                               Icon="@Icons.Material.Filled.Add" Color="Color.Primary" />
            </MudItem>
        </MudGrid>
        @if (!string.IsNullOrEmpty(error))
        {
            <MudAlert Severity="Severity.Error">@error</MudAlert>
        }
    </DialogContent>
</MudDialog>

@code {

    string error = null;
    ClaimViewModel model = new ClaimViewModel();

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public IEnumerable<ClaimViewModel> ExistingClaims { get; set; }

    void AddNewClaim()
    {      
        if (!ExistingClaims.Any(u => u.Type.Equals(model.Type) && u.Value.Equals(model.Value)))
        {
            MudDialog.Close(DialogResult.Ok<ClaimViewModel>(model));
            return;
        }
        error = $"Claim with type {model.Type} already exists for role.";
        return;

    }

    void Cancel() => MudDialog.Cancel();
}
