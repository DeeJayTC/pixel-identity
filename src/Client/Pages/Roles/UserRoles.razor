@page "/roles/list"
@inject IUserRolesService userRolesService
@inject IDialogService dialog

<MudTable Items="@(roles ?? Enumerable.Empty<UserRoleViewModel>())"
          Dense="false" Hover="true" ReadOnly="true" SortLabel="Sort By" Elevation="4">
    <ToolBarContent>
        <MudText Typo="Typo.h6">User Roles</MudText>
        <MudIconButton Icon="@Icons.Material.Outlined.AddCircleOutline" Size="Size.Large"
                       @onclick="ShowNewRoleDialog" Color="Color.Primary"></MudIconButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Role Name</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="#">
            @context.RoleName
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="pageSizeOptions" RowsPerPageString="Results Per Page" />
    </PagerContent>
    <ColGroup>
        <col style="width:20px;" />
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
</MudTable>


@code
{
    string searchString = "";
    readonly int[] pageSizeOptions = { 10, 20, 30, 40, 50 };

    IEnumerable<UserRoleViewModel> roles;

    protected override async Task OnInitializedAsync()
    {
        roles = await userRolesService.GetAll();
    }

    async Task ShowNewRoleDialog()
    {
        var dialogResult = dialog.Show<AddUserRole>("Add New Role", new DialogOptions() { CloseButton = true, FullWidth = true });
        var result = await dialogResult.Result;
        if(!result.Cancelled)
        {
            roles = await userRolesService.GetAll();
            StateHasChanged();
        }
    }
}